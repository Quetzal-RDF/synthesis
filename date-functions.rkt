#lang rosette
(current-bitwidth #f)

(require racket/date)


(define date-fields%
  (class object%
    (super-new)
    (init-field [seconds 0] [minutes 0] [hours 0] [days 0] [months 0] [years 0] [posix-seconds 0]
                 [days-of-month (make-hash '((1 31) (2 28) (3 31) (4 30) (5 31) (6 30) (7 31) (8 31) (9 30) (10 31) (11 30) (12 31)))]
                 [cum-days-of-month (make-hash '((1 31) (2 59) (3 90) (4 120) (5 151) (6 181) (7 212) (8 243) (9 273) (10 304) (11 334) (12 365)))]
                 [days-of-week (make-hash '((1 0) (2 1) (3 2) (4 3) (5 4) (6 5) (0 6)))]
                 )
    (assert (and (< seconds 60) (< minutes 60) (< hours 24) (< days 32) (< months 13) (< years 3000)))
 

    (define/public (is-leap)
      (if (= 0 (modulo years 100))
             (= 0 (modulo years 400))
             (= 0 (modulo years 4)))
    )

    (define/public (num-days-in-month)
      (if (and (equal? 2 months) (is-leap))
          29
          (first (hash-ref days-of-month months)))
    )

    (define/public (num-days m)
      (if (and (equal? 2 m) (is-leap))
          29
          (first (hash-ref days-of-month m)))
    )
    
    (define/public (add-seconds s)
      (assert (< s 60))
      (let ((p (+ seconds s)))
      (if (< p 60)
          (set-field! seconds this p)
          (begin
            (set-field! seconds this (- p 60))
            (add-minutes 1)))
        )
    )
    
    (define/public (add-minutes m)
      (assert (< m 60))
      (let ((p (+ minutes m)))
      (if (< p 60)
          (set-field! minutes this p)
          (begin
            (set-field! minutes this (- p 60))
            (add-hours 1)))
        )
     )

    (define/public (add-hours h)
      (assert (< h 24))
      (let ((p (+ hours h)))
      (if (< p 24)
          (set-field! hours this p)
          (begin
          (set-field! hours this (- p 24))
          (add-days 1)))
        )
    )

    (define/public (add-days d)
      (assert (<= d 28))  ; make sure days cannot span more than 1 month
      (let ((p (+ days d)))
        (if (<= p (num-days-in-month))
          (set-field! days this p)
          (begin
	    (set-field! days this (- p (num-days-in-month)))
	    (add-months 1)))
      )    
    )

    (define/public (add-months m)
      (assert (<= m 12))
      (let ((p (+ months m)))
        (if (<= p 12)
            (set-field! months this p)
            (begin
              (set-field! months this (- p 12))
              (add-years 1)))
        (check-valid-day))
     )

    (define/public (add-years y)
      (assert (< y 100))
      (set-field! years this (+ y years))
    )

    (define (check-valid-day)
      (when (< (num-days-in-month) days)
          (set-field! days this (num-days-in-month))))
    
    (define/public (print-fields)
      (print (list seconds minutes hours days months years posix-seconds))
    )

    (define/public (extract-seconds)
      (get-field seconds this)
    )

    (define/public (extract-minutes)
      (get-field minutes this)
    )

    (define/public (extract-hours)
      (get-field hours this)
    )

    (define/public (extract-days)
      (get-field days this)
    )

    (define/public (extract-months)
      (get-field months this)
    )

    (define/public (extract-years)
      (get-field years this)
    )

;   (define/public (extract-day-of-year)
;      (letrec ((k (lambda (m)
;		    (if (zero? m)
;			days
;			(+ (num-days m) (k (- m 1)))))))
;       (k (- months 1)))
;   )

  (define/public (extract-day-of-year)
    (let ((m (- months 1)))
     (if (and (> months 2) (is-leap))
         (+ (first (hash-ref cum-days-of-month m)) days 1)
         (+ (first (hash-ref cum-days-of-month m)) days)
     ))
  )
      
   ; from wikipedia, Zellerâ€™s algorithm, last step converts to postgresql's notion of week days
   (define/public (extract-day-of-week)
     (let ((Y (if (or (= months 1) (= months 2)) (- years 1) years))
	   (y (modulo years 100))
	   (c (quotient years 100))
	   (m (cond [(= months 1) 13]
		    [(= months 2) 14]
		    [#t months])))
       (let ((dow
	      (modulo (- (+ days
			    (floor (* 13 (/ (+ 1 m) 5)))
			    y
			    (floor (/ y 4))
			    (floor (/ c 4)))
			 (* 2 c))
		      7)))
         (first (hash-ref days-of-week dow))))
     )

   ; http://howardhinnant.github.io/date_algorithms.html#days_from_civil.  Days from Jan 1 1970 for Unix epoch time computations
   (define/public (get-days-since-civil)
     (letrec ((y (if (<= months 2) (- years 1) years))
	      (era (if (>= y 0) (quotient y 400) (quotient (- y 399) 400)))
	      (yoe (- y (* era 400)))
	      (z (if (> months 2) -3 9))
	      (doy (- (+ (quotient (+ (* 153 (+ months z)) 2) 5) days) 1))
	      (doe (- (+ (* yoe 365) (quotient yoe 4) doy) (quotient yoe 100))))
       (- (+ (* era 146097) doe) 719468)
       )
     )

    (define/public (extract-epoch)
      (* (get-days-since-civil) 86400))
    )
  )

; inverse of above, from http://howardhinnant.github.io/date_algorithms.html#days_from_civil.  Days from Jan 1 1970 for Unix epoch time computations
(define (civil_from_days z)
     (letrec ((days (+ z 719468))
         (era (if (>= days 0) (quotient days 146097) (quotient (- days 146096) 146097)))
         (doe (- days (* era 146097)))
         (yoe (quotient (- (+ doe (quotient doe 36524)) (quotient doe 1460) (quotient doe 146096)) 365))
         (y (+ yoe (* era 400)))
         (doy (- doe (+ (- (* 365 yoe) (quotient yoe 100)) (quotient yoe 4))))               
         (mp (quotient (+ (* 5 doy) 2) 153))                                   
         (d (+ (- doy (quotient (+ (* 153 mp) 2) 5)) 1))
         (m (if (< mp 10) (+ mp 3) (- mp 9))))
      (if (<= m 2) (list (+ y 1) m d)
            (list y m d)))
)

(define (date-from-epoch t)
 (letrec((s (modulo t 86400))
       (d (civil_from_days (floor (/ t 86400))))
       (hours (quotient s (* 60 60)))
       (rem (modulo s (* 60 60)))
       (minutes (quotient rem 60))
       (seconds (modulo s 60)))
  (new date-fields% [years (list-ref d 0)] [months (list-ref d 1)] [days (list-ref d 2)] [hours hours] [minutes minutes] [seconds seconds]))
)

(define (test-leap)
  (let ((d (new date-fields% [years 2000])))
  (assert (send d is-leap)))
  (let ((d (new date-fields% [years 2010])))
  (assert (not (send d is-leap))))
  (let ((d (new date-fields% [years 1900])))
  (assert (not (send d is-leap))))
  (let ((d (new date-fields% [years 2003])))
  (assert (not (send d is-leap))))
  (let ((d (new date-fields% [years 2016])))
  (assert (send d is-leap)))
  )
  
(define (test-add-seconds)
  ; test roll over to new day, leap year
  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 28] [months 2] [years 2000])))
  (send d add-seconds 10)
  (send d print-fields)
  (assert (= 9 (get-field seconds d)))
  (assert (= 0 (get-field minutes d)))
  (assert (= 0 (get-field hours d)))
  (assert (= 29 (get-field days d)))
  (assert (= 2 (get-field months d)))
  (assert (= 2000 (get-field years d)))
  )

  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 28] [months 2] [years 2001])))
  ; test roll over to new day, non-leap year
  (send d add-seconds 10)
  (send d print-fields)
  (assert (= 9 (get-field seconds d)))
  (assert (= 0 (get-field minutes d)))
  (assert (= 0 (get-field hours d)))
  (assert (= 1 (get-field days d)))
  (assert (= 3 (get-field months d)))
  (assert (= 2001 (get-field years d)))
  )

  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 1] [years 2001])))
  ; test roll over to new day of a new month
  (send d add-seconds 10)
  (send d print-fields)
  (assert (= 9 (get-field seconds d)))
  (assert (= 0 (get-field minutes d)))
  (assert (= 0 (get-field hours d)))
  (assert (= 1 (get-field days d)))
  (assert (= 2 (get-field months d)))
  (assert (= 2001 (get-field years d)))
  )

  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 12] [years 2001])))
  ; test roll over to a new year
  (send d add-seconds 10)
  (send d print-fields)
  (assert (= 9 (get-field seconds d)))
  (assert (= 0 (get-field minutes d)))
  (assert (= 0 (get-field hours d)))
  (assert (= 1 (get-field days d)))
  (assert (= 1 (get-field months d)))
  (assert (= 2002 (get-field years d)))
  )
  )

(define (test-add-minutes)
  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 28] [months 2] [years 2000])))
   ; test roll over to new day, leap year
  (send d add-minutes 20)
  (send d print-fields)
  (assert (= 59 (get-field seconds d)))
  (assert (= 19 (get-field minutes d)))
  (assert (= 0 (get-field hours d)))
  (assert (= 29 (get-field days d)))
  (assert (= 2 (get-field months d)))
  (assert (= 2000 (get-field years d)))
  )

  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 28] [months 2] [years 2001])))
  ; test roll over to new month, non-leap year
  (send d add-minutes 20)
  (send d print-fields)
  (assert (= 59 (get-field seconds d)))
  (assert (= 19 (get-field minutes d)))
  (assert (= 0 (get-field hours d)))
  (assert (= 1 (get-field days d)))
  (assert (= 3 (get-field months d)))
  (assert (= 2001 (get-field years d)))
  )

  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 12] [years 2001])))
  ; test roll over to new year
  (send d add-minutes 20)
  (send d print-fields)
  (assert (= 59 (get-field seconds d)))
  (assert (= 19 (get-field minutes d)))
  (assert (= 0 (get-field hours d)))
  (assert (= 1 (get-field days d)))
  (assert (= 1 (get-field months d)))
  (assert (= 2002 (get-field years d)))
  )
)

(define (test-add-hours)
  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 28] [months 2] [years 2000])))
   ; test roll over to new day, leap year
  (send d add-hours 23)
  (send d print-fields)
  (assert (= 59 (get-field seconds d)))
  (assert (= 59 (get-field minutes d)))
  (assert (= 22 (get-field hours d)))
  (assert (= 29 (get-field days d)))
  (assert (= 2 (get-field months d)))
  (assert (= 2000 (get-field years d)))
  )

  ; test roll over to new day, non leap year
  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 28] [months 2] [years 2001])))
  (send d add-hours 23)
  (send d print-fields)
  (assert (= 59 (get-field seconds d)))
  (assert (= 59 (get-field minutes d)))
  (assert (= 22 (get-field hours d)))
  (assert (= 1 (get-field days d)))
  (assert (= 3 (get-field months d)))
  (assert (= 2001 (get-field years d)))
  )

  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 12] [years 2001])))
  ; test roll over to new year
  (send d add-hours 23)
  (send d print-fields)
  (assert (= 59 (get-field seconds d)))
  (assert (= 59 (get-field minutes d)))
  (assert (= 22 (get-field hours d)))
  (assert (= 1 (get-field days d)))
  (assert (= 1 (get-field months d)))
  (assert (= 2002 (get-field years d)))
  )
)

(define (test-add-days)
  (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 1] [years 2001])))
     ; test roll over to new month, non leap year
    (send d add-days 28)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 28 (get-field days d)))
    (assert (= 2 (get-field months d)))
    (assert (= 2001 (get-field years d)))
    )

   (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 15] [months 2] [years 2001])))
     ; test roll over to new month, non leap year
    (send d add-days 20)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 7 (get-field days d)))
    (assert (= 3 (get-field months d)))
    (assert (= 2001 (get-field years d)))
    )

     (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 15] [months 2] [years 2000])))
     ; test roll over to new month, leap year
    (send d add-days 20)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 6 (get-field days d)))
    (assert (= 3 (get-field months d)))
    (assert (= 2000 (get-field years d)))
    )

    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 15] [months 12] [years 2000])))
     ; test roll over to year
    (send d add-days 20)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 4 (get-field days d)))
    (assert (= 1 (get-field months d)))
    (assert (= 2001 (get-field years d)))
    )
)

(define (test-add-months)
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 1] [years 2001])))
     ; test roll add 1 month to invalid days
    (send d add-months 1)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 28 (get-field days d)))
    (assert (= 2 (get-field months d)))
    (assert (= 2001 (get-field years d)))
    )

    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 1] [years 1964])))
     ; test roll add 1 month to invalid days
    (send d add-months 1)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 29 (get-field days d)))
    (assert (= 2 (get-field months d)))
    (assert (= 1964 (get-field years d)))
    )

    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 3] [years 2001])))
     ; test roll add 1 month to invalid days
    (send d add-months 1)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 30 (get-field days d)))
    (assert (= 4 (get-field months d)))
    (assert (= 2001 (get-field years d)))
    )

    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 7] [years 2001])))
     ; test roll add 1 month to valid days
    (send d add-months 1)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 31 (get-field days d)))
    (assert (= 8 (get-field months d)))
    (assert (= 2001 (get-field years d)))
    )

     (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 12] [years 2001])))
     ; test roll add 1 month to change year
    (send d add-months 1)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 31 (get-field days d)))
    (assert (= 1 (get-field months d)))
    (assert (= 2002 (get-field years d)))
    )
)

(define (test-add-years)
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 1] [years 2001])))
    (send d add-years 99)
    (send d print-fields)
    (assert (= 59 (get-field seconds d)))
    (assert (= 59 (get-field minutes d)))
    (assert (= 23 (get-field hours d)))
    (assert (= 31 (get-field days d)))
    (assert (= 1 (get-field months d)))
    (assert (= 2100 (get-field years d)))
    )
)

(define (test-doy)
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 3] [months 4] [years 2017])))
      (assert (= 93 (send d extract-day-of-year))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 15] [months 5] [years 1964])))
      (assert (= 136 (send d extract-day-of-year))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 15] [months 5] [years 1998])))
      (assert (= 135 (send d extract-day-of-year))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 30] [months 8] [years 1998])))
      (assert (= 242 (send d extract-day-of-year))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 8] [years 1998])))
      (assert (= 243 (send d extract-day-of-year))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 1] [months 9] [years 1998])))
      (assert (= 244 (send d extract-day-of-year))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 30] [months 9] [years 1998])))
      (assert (= 273 (send d extract-day-of-year))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 30] [months 9] [years 2000])))
      (assert (= 274 (send d extract-day-of-year))))
     (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 12] [years 2000])))
      (assert (= 366 (send d extract-day-of-year))))
     (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 12] [years 2001])))
      (assert (= 365 (send d extract-day-of-year))))
)

(define (test-epoch)
    (let ((d (new date-fields% [seconds 0] [minutes 0] [hours 0] [days 3] [months 4] [years 2017])))
      (assert (= 1491177600 (send d extract-epoch))))
    (let ((d (new date-fields% [seconds 0] [minutes 0] [hours 0] [days 1] [months 1] [years 1970])))
      (assert (= 0 (send d extract-epoch))))
    (let ((d (new date-fields% [seconds 0] [minutes 0] [hours 0] [days 1] [months 1] [years 1969])))
      (assert (= -31536000 (send d extract-epoch))))
    (let ((d (new date-fields% [seconds 0] [minutes 0] [hours 0] [days 1] [months 1] [years 1968])))
      (assert (= -63158400 (send d extract-epoch))))
    (let ((d (new date-fields% [seconds 0] [minutes 0] [hours 0] [days 1] [months 1] [years 1964])))
      (assert (= -189388800 (send d extract-epoch))))
    (let ((d (new date-fields% [seconds 0] [minutes 0] [hours 0] [days 1] [months 1] [years 1912])))
      (assert (= -1830384000 (send d extract-epoch))))
)

(define (test-date-creation)
  (let ((d (date-from-epoch 1491492440)))
      (assert (= 20 (get-field seconds d)))
      (assert (= 27 (get-field minutes d)))
      (assert (= 15 (get-field hours d)))
      (assert (= 6 (get-field days d)))
      (assert (= 4 (get-field months d)))
      (assert (= 2017 (get-field years d)))
    )
    (let ((d (date-from-epoch 912467738)))
      (assert (= 38 (get-field seconds d)))
      (assert (= 15 (get-field minutes d)))
      (assert (= 23 (get-field hours d)))
      (assert (= 30 (get-field days d)))
      (assert (= 11 (get-field months d)))
      (assert (= 1998 (get-field years d)))
    )
     (let ((d (date-from-epoch -29029718)))
      (assert (= 22 (get-field seconds d)))
      (assert (= 11 (get-field minutes d)))
      (assert (= 0 (get-field hours d)))
      (assert (= 30 (get-field days d)))
      (assert (= 1 (get-field months d)))
      (assert (= 1969 (get-field years d)))
    )
    (let ((d (date-from-epoch -1821303575)))
      (assert (= 25 (get-field seconds d)))
      (assert (= 20 (get-field minutes d)))
      (assert (= 2 (get-field hours d)))
      (assert (= 15 (get-field days d)))
      (assert (= 4 (get-field months d)))
      (assert (= 1912(get-field years d)))
    )
)


(define (test-dow)
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 3] [months 4] [years 2017])))
      (assert (= 1 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 1] [months 4] [years 2017])))
     (assert (= 6 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 2] [months 4] [years 2017])))
     (assert (= 0 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 15] [months 5] [years 1964])))
      (assert (= 5 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 15] [months 5] [years 1998])))
      (assert (= 5 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 30] [months 8] [years 1998])))
      (assert (= 0 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 8] [years 1998])))
      (assert (= 1 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 1] [months 9] [years 1998])))
      (assert (= 2 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 30] [months 9] [years 1998])))
      (assert (= 3 (send d extract-day-of-week))))
    (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 30] [months 9] [years 2000])))
      (assert (= 6 (send d extract-day-of-week))))
     (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 12] [years 2000])))
      (assert (= 0 (send d extract-day-of-week))))
     (let ((d (new date-fields% [seconds 59] [minutes 59] [hours 23] [days 31] [months 12] [years 2001])))
      (assert (= 1 (send d extract-day-of-week))))
  )
 
  
(define (test-all-date-ops)
  (test-leap)
  (test-add-seconds)
  (test-add-minutes)
  (test-add-hours)
  (test-add-days)
  (test-add-months)
  (test-add-years)
  (test-doy)
  (test-dow)
  (test-epoch)
  (test-date-creation)
  )
 
